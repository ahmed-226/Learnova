generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  firstName String
  lastName  String
  bio       String?
  avatar       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  courses   Course[] @relation("InstructorCourses")
  progress  Progress[]
  answers   Answer[]
  submissions Submission[]
  threads   Thread[]
  posts     Post[]
  notifications Notification[]
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  instructorId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  instructor  User     @relation("InstructorCourses", fields: [instructorId], references: [id])
  modules     Module[]
  forum       Forum?
  progress    Progress[]
  @@index([instructorId])
}

model Module {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  courseId    Int
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  quizzes     Quiz[]
  assignments Assignment[]
  @@index([courseId])
}

model Lesson{
  id          Int      @id @default(autoincrement())
  title       String
  content     String?   @db.Text
  moduleId    Int
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  @@index([moduleId])
}
model Quiz{
  id          Int      @id @default(autoincrement())
  title       String
  moduleId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  questions   Question[]
  @@index([moduleId])

}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

model Question {
  id          Int      @id @default(autoincrement())
  quizId      Int
  question    String
  type        QuestionType
  options     Json?
  correctAnswer String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     Answer[]
  @@index([quizId])
}
model Answer{
  id          Int      @id @default(autoincrement())
  questionId  Int
  userId      Int
  answer      String
  isCorrect   Boolean?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([questionId, userId])
}
model Forum{
  id          Int      @id @default(autoincrement())
  courseId    Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  threads     Thread[]
  @@index([courseId])
}
model Thread{
  id          Int      @id @default(autoincrement())
  forumId     Int
  userId      Int
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  forum       Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       Post[]
  @@index([forumId, userId])
}
model Post{
  id          Int      @id @default(autoincrement())
  threadId    Int
  userId      Int
  content     String   
  parentId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  thread      Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Post?    @relation("PostReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Post[]   @relation("PostReplies")
  @@index([threadId, userId, parentId])

}
model Assignment{
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  moduleId    Int
  dueDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  submissions Submission[]
  @@index([moduleId])
}

enum ContentType {
  TEXT
  URL
  JSON
}

model Submission{
  id          Int      @id @default(autoincrement())
  assignmentId Int
  userId      Int
  content     String   @db.Text
  contentType ContentType
  feedback    String?
  grade       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignment  Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([assignmentId, userId])
}
model Progress{
  id          Int      @id @default(autoincrement())
  userId      Int
  courseId    Int
  progress    Int?      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([userId, courseId])

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@index([userId, courseId])
  }
model Notification{
  id          Int      @id @default(autoincrement())
  userId      Int
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}
