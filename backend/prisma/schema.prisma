generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  firstName String
  lastName  String
  bio       String?
  avatar       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  courses   Course[] @relation("InstructorCourses")
  progress  Progress[]
  answers   Answer[]
  submissions Submission[]
  quizSubmissions QuizSubmission[]  
  threads   Thread[]
  posts     Post[]
  notifications Notification[]
  lessonProgress LessonProgress[]
  achievements UserAchievement[]
  courseCompletions CourseCompletion[]
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String?  @db.Text
  category    String?
  level       String?
  price       Float    @default(0)
  isFree      Boolean  @default(false)
  coverImage  String?
  previewVideo String?
  instructorId Int
  instructor   User     @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  modules     Module[]
  progress    Progress[]
  completions CourseCompletion[]
  forum       Forum?
  @@index([instructorId])
}

model Module {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  courseId    Int
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  quizzes     Quiz[]
  assignments Assignment[]
  @@index([courseId])
}

model Lesson{
  id          Int      @id @default(autoincrement())
  title       String
  content     String?   @db.Text
  moduleId    Int
  videoUrl  String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  duration     Int?      
  // Relations
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    LessonProgress[]
  @@index([moduleId])
}

model QuizSubmission {
  id          Int      @id @default(autoincrement())
  quizId      Int
  userId      Int
  score       Int
  isCompleted Boolean  @default(false)
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([quizId, userId])
  @@index([quizId, userId])
}

model Quiz {
  id                Int      @id @default(autoincrement())
  title             String
  description       String?
  timeLimit         Int?    
  passingScore      Int      @default(70)
  shuffleQuestions  Boolean  @default(false)
  showCorrectAnswers Boolean @default(true)
  isPublished       Boolean  @default(false)
  moduleId          Int
  module            Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  questions         Question[]
  submissions       QuizSubmission[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  order             Int?     @default(0)
}

model Achievement {
  id          Int      @id @default(autoincrement())
  type        AchievementType
  title       String
  description String
  icon        String   // Icon name or emoji
  criteria    Json     // Criteria for earning this achievement
  points      Int      @default(0)
  rarity      AchievementRarity @default(COMMON)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userAchievements UserAchievement[]
  
  @@index([type, rarity])
}

model UserAchievement {
  id            Int      @id @default(autoincrement())
  userId        Int
  achievementId Int
  earnedAt      DateTime @default(now())
  progress      Int      @default(100) 
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@index([userId])
}

enum AchievementType {
  COURSE_COMPLETION
  LESSON_COMPLETION
  QUIZ_COMPLETION
  ASSIGNMENT_COMPLETION
  FORUM_PARTICIPATION
  STREAK_ACHIEVEMENT
  SPECIAL_ACHIEVEMENT
}

enum AchievementRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

model CourseCompletion {
  id          Int      @id @default(autoincrement())
  userId      Int
  courseId    Int
  completedAt DateTime @default(now())
  grade       Float?  
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId, completedAt])
}


enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}

model Question {
  id            Int      @id @default(autoincrement())
  question      String
  type          String   
  options       Json?    
  correctAnswer String
  order         Int?     @default(0)
  quizId        Int
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       Answer[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
model Answer{
  id          Int      @id @default(autoincrement())
  questionId  Int
  userId      Int
  answer      String
  isCorrect   Boolean?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order        Int      @default(0)
  // Relations
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([questionId, userId])
}
model Forum{
  id          Int      @id @default(autoincrement())
  courseId    Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  threads     Thread[]
  @@index([courseId])
}
model Thread{
  id          Int      @id @default(autoincrement())
  forumId     Int
  userId      Int
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  forum       Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       Post[]
  @@index([forumId, userId])
}
model Post{
  id          Int      @id @default(autoincrement())
  threadId    Int
  userId      Int
  content     String   
  parentId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  thread      Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Post?    @relation("PostReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Post[]   @relation("PostReplies")
  @@index([threadId, userId, parentId])

}
model Assignment{
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  moduleId    Int
  dueDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Int      @default(0) 

  // Relations
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  submissions Submission[]
  @@index([moduleId])
}

enum ContentType {
  TEXT
  URL
  JSON
}

model Submission{
  id          Int      @id @default(autoincrement())
  assignmentId Int
  userId      Int
  content     String   @db.Text
  contentType ContentType
  feedback    String?
  grade       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignment  Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([assignmentId, userId])
}
model Progress{
  id          Int      @id @default(autoincrement())
  userId      Int
  courseId    Int
  progress    Int?      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([userId, courseId])

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@index([userId, courseId])
}

model LessonProgress {
  id          Int      @id @default(autoincrement())
  userId      Int
  lessonId    Int
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@index([userId, lessonId])
}

model Notification{
  id          Int      @id @default(autoincrement())
  userId      Int
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}
